
AC_PREREQ(2.59)
AC_INIT(src/main.c)
AC_CONFIG_AUX_DIR(config)
AC_CONFIG_MACRO_DIR([m4])

PACKAGE=claws-mail

dnl version number
INTERFACE_AGE=0
BINARY_AGE=0
EXTRA_RELEASE=
EXTRA_GTK2_VERSION=

if test \( -d .git \); then
    AC_CHECK_PROG([GIT], [git], [yes], [no], [$PATH])
    if test \( "$GIT" = "no" \); then
	AC_MSG_ERROR([*** git not found. See http://git-scm.com/])
    else
	GIT_VERSION=`git describe --abbrev=6 --dirty --always`
	echo "echo ${GIT_VERSION}" > ./version
    fi
else
    GIT_VERSION=`sh -c ". ./$srcdir/version"`
fi
MAJOR_VERSION=${GIT_VERSION%%.*}
MINOR_VERSION=${GIT_VERSION#*.}
MINOR_VERSION=${MINOR_VERSION%%.*}
MICRO_VERSION=${GIT_VERSION##*.}
MICRO_VERSION=${MICRO_VERSION%%-*}
EXTRA_VERSION=${GIT_VERSION#*-}
EXTRA_VERSION=${EXTRA_VERSION%%-*}

if test \( "x$EXTRA_VERSION" != "x" -a `echo -n $EXTRA_VERSION | wc -c` -lt 5 \); then
    VERSION=${MAJOR_VERSION}.${MINOR_VERSION}.${MICRO_VERSION}git${EXTRA_VERSION}
else
    VERSION=${MAJOR_VERSION}.${MINOR_VERSION}.${MICRO_VERSION}
    EXTRA_VERSION=0
fi

if test \( "x$EXTRA_RELEASE" != "x" \); then
    VERSION=${VERSION}${EXTRA_RELEASE}${EXTRA_GTK2_VERSION}
fi

dnl set $target
AC_CANONICAL_SYSTEM

dnl
AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)
dnl AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE")
dnl AC_DEFINE_UNQUOTED(VERSION, "$VERSION")
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(MICRO_VERSION)
AC_SUBST(EXTRA_VERSION)
AC_SUBST(GIT_VERSION)

AC_CHECK_PROG(HAVE_GTK_ICON_CACHE, gtk-update-icon-cache, yes, no)
AM_CONDITIONAL(UPDATE_GTK_ICON_CACHE, test x"$HAVE_GTK_ICON_CACHE" = xyes)

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test x$PKG_CONFIG = xno ; then
  AC_MSG_ERROR([*** pkg-config not found. See http://www.freedesktop.org/software/pkgconfig/])
fi

dnl GNOME 2.x installed?
PKG_CHECK_MODULES(GNOME2, libgnome-2.0 >= 2.0, ac_enable_gnome2=yes, ac_enable_gnome2=no)
AM_CONDITIONAL(CLAWS_GNOME2, test x"$ac_enable_gnome2" = x"yes")

dnl libtool versioning
LT_RELEASE=$MAJOR_VERSION.$MINOR_VERSION
LT_CURRENT=`expr $MICRO_VERSION - $INTERFACE_AGE`
LT_REVISION=$INTERFACE_AGE
LT_AGE=`expr $BINARY_AGE - $INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

dnl Specify a header configuration file
AC_CONFIG_HEADERS(config.h)
AC_CONFIG_HEADERS(claws-features.h)

AM_MAINTAINER_MODE

dnl Checks for programs.
dnl AC_ARG_PROGRAM
AC_PROG_CC
AC_ISC_POSIX
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_CPP
dnl AC_PROG_RANLIB
AM_PROG_LEX
AC_PROG_YACC
AC_LIB_PREFIX
AC_LIBTOOL_WIN32_DLL
LT_INIT
LT_AC_PROG_RC
AC_LIBTOOL_RC
AC_PROG_LIBTOOL

AC_SYS_LARGEFILE

dnl ******************************
dnl Checks for host
dnl Not needed anymore because we
dnl do AC_CANONICAL_SYSTEM above
dnl ******************************
dnl AC_CANONICAL_HOST

dnl Copied from the official gtk+-2 configure.in
AC_MSG_CHECKING([for some Win32 platform])
case "$host" in
  *-*-mingw*|*-*-cygwin*)
    platform_win32=yes
    LDFLAGS="$LDFLAGS -mwindows"
    ;;
  *)
    platform_win32=no
    ;;
esac
AC_MSG_RESULT([$platform_win32])
AM_CONDITIONAL(PLATFORM_WIN32, test x"$platform_win32" = x"yes")

AC_MSG_CHECKING([for native Win32])
case "$host" in
  *-*-mingw*)
    os_win32=yes
    ;;
  *)
    os_win32=no
    ;;
esac
AC_MSG_RESULT([$os_win32])
AM_CONDITIONAL(OS_WIN32, test x"$os_win32" = x"yes")

AC_MSG_CHECKING([for Cygwin])
case "$host" in
  *-*-cygwin*)
    env_cygwin=yes
    ;;
  *)
    env_cygwin=no
    ;;
esac
AC_MSG_RESULT([$env_cygwin])
AM_CONDITIONAL(CYGWIN, test x"$env_cygwin" = x"yes")

if test "$GCC" = "yes"
then
	CFLAGS="$CFLAGS -Wno-unused-function"
	#CFLAGS="-g -Wall -Wno-unused-function"
fi

AC_MSG_CHECKING([if gcc supports -Wno-pointer-sign])
_gcc_cflags_save=$CFLAGS
CFLAGS="-Wno-pointer-sign"
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([])],_gcc_psign=yes,_gcc_psign=no)
AC_MSG_RESULT($_gcc_psign)
CFLAGS=$_gcc_cflags_save;
if test x"$_gcc_psign" = xyes ; then
	CFLAGS="$CFLAGS -Wno-pointer-sign"
fi

CFLAGS="$CFLAGS -Wall"

if test $USE_MAINTAINER_MODE = yes; then
	CFLAGS="-g -Wall -Wno-pointer-sign -DUSE_MAINTAINER_MODE"
fi

pthread_name=
case "$target" in
*-darwin*)
	CFLAGS="$CFLAGS -no-cpp-precomp -fno-common"
	;;
*-*-mingw*)
        # Note that we need to link to pthreadGC2 in all cases. This
        # is because some locking is used even when pthread support is
        # disabled.
        pthread_name=pthreadGC2
	CFLAGS="$CFLAGS -mms-bitfields"
	LIBS="$LIBS -l${pthread_name} -lws2_32 -lregex"
	;;
*-*-solaris*)
	CPPFLAGS="$CPPFLAGS -D_POSIX_PTHREAD_SEMANTICS"
	CFLAGS="$CFLAGS -std=gnu99 -DSOLARIS"
	;;
esac

dnl Checks for iconv
AM_ICONV

dnl floor and ceil are  in -lm
LIBS="$LIBS -lm"

dnl
dnl Check for bind_textdomain_codeset, including -lintl if GLib brings it in.
dnl
syl_save_LIBS=$LIBS
LIBS="$LIBS $GTK_LIBS"
AC_CHECK_FUNCS(bind_textdomain_codeset)
LIBS=$syl_save_LIBS

dnl for gettext
ALL_LINGUAS="bg ca cs de en_GB eo es fi fr he hu id_ID it ja lt nb nl pl pt_BR pt_PT ru sk sv uk zh_CN zh_TW"
GETTEXT_PACKAGE=claws-mail
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [Define text domain.])

AM_GNU_GETTEXT_VERSION([0.18])
AM_GNU_GETTEXT([external])

AC_ARG_ENABLE(manual,
		[  --disable-manual                Do not build user manual],
		[enable_manual=$enableval], [enable_manual=yes])

AC_ARG_ENABLE(libsm,
		[  --disable-libsm                 Do not build libSM support for session management],
		[enable_libsm=$enableval], [enable_libsm=yes])

AC_ARG_ENABLE(ipv6,
		[  --disable-ipv6                  Do not build IPv6 support],
		[enable_ipv6=$enableval], [enable_ipv6=yes])

AC_ARG_ENABLE(gnutls,
		[  --disable-gnutls                Do not build GnuTLS support for SSL/TLS],
		    [enable_gnutls=$enableval], [enable_gnutls=yes])

AC_ARG_ENABLE(enchant,
		[  --disable-enchant               Do not build Enchant support for spell-checking],
		[enable_enchant=$enableval], [enable_enchant=yes])

AC_ARG_ENABLE(crash-dialog,
		[  --enable-crash-dialog           Build crash dialog],
		[enable_crash_dialog=$enableval], [enable_crash_dialog=no])

AC_ARG_ENABLE(generic-umpc,
		[  --enable-generic-umpc           Build generic UMPC code],
		[enable_generic_umpc=$enableval], [enable_generic_umpc=no])

AC_ARG_ENABLE(compface,
		[  --disable-compface              Do not build compface support for X-Face],
		[enable_compface=$enableval], [enable_compface=yes])

AC_ARG_ENABLE(pthread,
		[  --disable-pthread               Do not build pthread support],
		[enable_pthread=$enableval], [enable_pthread=yes])

AC_ARG_ENABLE(startup-notification,
		[  --disable-startup-notification  Do not startup notification support],
		[enable_startup_notification=$enableval], [enable_startup_notification=yes])

AC_ARG_ENABLE(dbus,
		[  --disable-dbus                  Do not build DBUS support],
		[enable_dbus=$enableval], [enable_dbus=yes])

AC_ARG_ENABLE(ldap,
		[  --disable-ldap                  Do not build LDAP support],
		[enable_ldap=$enableval], [enable_ldap=yes])

AC_ARG_ENABLE(jpilot,
		[  --disable-jpilot                Do not build JPilot support],
		[enable_jpilot=$enableval], [enable_jpilot=yes])

AC_ARG_ENABLE(networkmanager,
		[  --disable-networkmanager        Do not build NetworkManager support],
		[enable_networkmanager=$enableval], [enable_networkmanager=yes])

AC_ARG_ENABLE(libetpan,
		[  --disable-libetpan              Do not build libetpan support for IMAP4/NNTP],
		[enable_libetpan=$enableval], [enable_libetpan=yes])

AC_ARG_ENABLE(valgrind,
		[  --disable-valgrind              Do not build valgrind support for debugging],
		[enable_valgrind=$enableval], [enable_valgrind=yes])

AC_ARG_ENABLE(new-addrbook,
		[  --enable-new-addrbook           Build new external address book support],
		[enable_new_addrbook=$enableval], [enable_new_addrbook=no])

AC_ARG_ENABLE(gtk3,
		[  --enable-gtk3                   Build GTK3 support],
		[enable_gtk3=$enableval], [enable_gtk3=no])

AC_ARG_ENABLE(deprecated,
		[  --disable-deprecated            Disable deprecated GTK functions],
		[GTK_CFLAGS="$GTK_CFLAGS -DG_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED"], [])

manualdir='${docdir}/manual'
AC_ARG_WITH(manualdir,
	[  --with-manualdir=DIR    Manual directory],
	[manualdir="$withval"])
AC_SUBST(manualdir)

dnl ******************************
dnl ** Check for required tools **
dnl ** to build manuals         **
dnl ******************************

AC_PATH_PROG(DOCBOOK2HTML, docbook2html)
AC_PATH_PROG(DOCBOOK2TXT, docbook2txt)
AC_PATH_PROG(DOCBOOK2PS, docbook2ps)
AC_PATH_PROG(DOCBOOK2PDF, docbook2pdf)

AM_CONDITIONAL(MANUAL_HTML, test -n "$DOCBOOK2HTML")
AM_CONDITIONAL(MANUAL_TXT, test -n "$DOCBOOK2TXT")
AM_CONDITIONAL(MANUAL_PDF, test -n "$DOCBOOK2PDF")
AM_CONDITIONAL(MANUAL_PS, test -n "$DOCBOOK2PS")

if test x"$enable_manual" = x"yes"; then
    if test -n "$DOCBOOK2TXT" -o -n "$DOCBOOK2HTML" \
	-o -n "$DOCBOOK2PS" -o -n "$DOCBOOK2PDF"; then
	    enable_manual=yes
	else
	    enable_manual=no
    fi
fi

AM_CONDITIONAL(BUILD_MANUAL, test x"$enable_manual" = xyes)

dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${datarootdir}" = 'x${prefix}/share'; then
	if test "x${prefix}" = "xNONE"; then
    		AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}",[PACKAGE_DATA_DIR])
  	else
    		AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}",[PACKAGE_DATA_DIR])
  	fi
else
	AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datarootdir}/${PACKAGE}",[PACKAGE_DATA_DIR])
fi

AC_CHECK_LIB(xpg4, setlocale)

SM_LIBS=""
dnl Check for LibSM
AC_MSG_CHECKING([whether to use LibSM])
if test x"$enable_libsm" = xyes; then
	AC_MSG_RESULT(yes)
	AC_CHECK_LIB(SM, SmcSaveYourselfDone,
		[SM_LIBS="$X_LIBS -lSM -lICE"],enable_libsm=no,
		$X_LIBS -lICE)
	AC_CHECK_HEADERS(X11/SM/SMlib.h,,enable_libsm=no)
	if test x"$enable_libsm" = xyes; then
		AC_DEFINE(HAVE_LIBSM, 1, [Define to 1 if you have libSM installed])
	else
		AC_MSG_RESULT(not found)
		AC_MSG_WARN([*** LibSM will not be supported ***])
	fi
else
	AC_MSG_RESULT(no)
fi
AC_SUBST(SM_LIBS)

dnl Check for d_type member in struct dirent
AC_MSG_CHECKING([whether struct dirent has d_type member])
AC_CACHE_VAL(ac_cv_dirent_d_type,[
	AC_TRY_COMPILE([#include <dirent.h>],
		       [struct dirent d; d.d_type = DT_REG;],
		       ac_cv_dirent_d_type=yes, ac_cv_dirent_d_type=no)
])
AC_MSG_RESULT($ac_cv_dirent_d_type)
if test $ac_cv_dirent_d_type = yes; then
	AC_DEFINE(HAVE_DIRENT_D_TYPE, 1,
		  Define if `struct dirent' has `d_type' member.)
fi

# Check whether mkdir does not take the permission argument.
GNUPG_FUNC_MKDIR_TAKES_ONE_ARG

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h sys/file.h unistd.h paths.h \
		 sys/param.h sys/utsname.h sys/select.h \
		 wchar.h wctype.h locale.h netdb.h)
AC_CHECK_HEADER([execinfo.h], [AC_DEFINE(HAVE_BACKTRACE,1,[Has backtrace*() needed for retrieving stack traces])])
AC_SEARCH_LIBS(backtrace_symbols, [execinfo])

dnl alf - Check for apache installation f*ck up. apache may also install an
dnl fnmatch, which includes their own regex stuff if USE_HSREGEX is defined
AC_TRY_COMPILE([#include <stdlib.h>
		#include <fnmatch.h>],
	[int x = USE_HSREGEX;],
	ac_cv_have_apache_fnmatch=yes, ac_cv_have_apache_fnmatch=no)
if test $ac_cv_have_apache_fnmatch = yes; then
	AC_DEFINE(HAVE_APACHE_FNMATCH, 1, Define if you need to work around apache regex/fnmatch !KLUDGE!)
fi
AC_MSG_CHECKING([whether to use Apache regex header kludge])
AC_MSG_RESULT($ac_cv_have_apache_fnmatch)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_STRUCT_TM

dnl AC_CHECK_TYPE(wint_t, unsigned int) does not work because wint_t
dnl may be defined only in wchar.h (this happens with gcc-2.96).
dnl So we need to use this extended macro.
CLAWS_CHECK_TYPE(wint_t, unsigned int,
[
#if HAVE_WCHAR_H
#include <wchar.h>
#endif
], Define to `unsigned int' if <stddef.h> or <wchar.h> doesn't define.)

GNUPG_CHECK_TYPEDEF(u32, HAVE_U32_TYPEDEF, Used to test for a u32 typedef)
AC_CHECK_SIZEOF(unsigned short, 2)
AC_CHECK_SIZEOF(unsigned int, 4)
AC_CHECK_SIZEOF(unsigned long, 4)

dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_CHECK_FUNCS(gethostname mkdir mktime socket strstr strchr \
	       uname flock lockf inet_aton inet_addr \
	       fchmod mkstemp truncate getuid regcomp)

AC_CHECK_FUNCS(fgets_unlocked fwrite_unlocked)

dnl *****************
dnl ** common code **
dnl *****************

dnl check for glib
PKG_CHECK_MODULES(GLIB, glib-2.0 >= 2.20 gmodule-2.0 >= 2.20 gobject-2.0 >= 2.20 gthread-2.0 >= 2.20)

GLIB_GENMARSHAL=`pkg-config --variable=glib_genmarshal glib-2.0`
AC_SUBST(GLIB_GENMARSHAL)

AC_SUBST(GLIB_CFLAGS)
AC_SUBST(GLIB_LIBS)

dnl Check for bind_textdomain_codeset, including -lintl if GLib brings it in.
syl_save_LIBS=$LIBS
LIBS="$LIBS $GTK_LIBS"
AC_CHECK_FUNCS(bind_textdomain_codeset)
LIBS=$syl_save_LIBS

dnl check for IPv6 option
dnl automated checks for IPv6 support.
AC_MSG_CHECKING([whether to use IPv6])
if test x"$enable_ipv6" = xyes; then
	AC_MSG_RESULT(yes)
	AC_MSG_CHECKING([for IPv6 support])
	AC_CACHE_VAL(ac_cv_ipv6,[
		AC_TRY_COMPILE([#define INET6
				#include <sys/types.h>
				#include <netinet/in.h>],
			[int x = IPPROTO_IPV6; struct in6_addr a;],
			ac_cv_ipv6=yes, ac_cv_ipv6=no)
	])
	AC_MSG_RESULT($ac_cv_ipv6)
	if test $ac_cv_ipv6 = yes; then
		AC_DEFINE(INET6, 1, Define if you want IPv6 support.)
	else
		AC_MSG_WARN(*** IPv6 will not be supported ***)
		enable_ipv6=no
	fi
else
	AC_MSG_RESULT(no)
fi

dnl GNUTLS
AC_MSG_CHECKING([whether to use GnuTLS])
AC_MSG_RESULT($enable_gnutls)
if test "x$enable_gnutls" != "xno"; then
        PKG_CHECK_MODULES(GNUTLS, gnutls >= 2.2,
        [
                AC_DEFINE(USE_GNUTLS, 1, gnutls)
                echo "Building with GnuTLS"
		PKG_CHECK_MODULES(GNUTLS, gnutls >= 2.11,
		[
			dnl No linking against libgcrypt needed
		],
		[
			dnl linking against libgcrypt *is* needed
			GNUTLS_LIBS="$GNUTLS_LIBS -lgcrypt"
		])
        ],
        [
                echo "Building without gnutls"
		enable_gnutls=no
        ])
        AC_SUBST(GNUTLS_LIBS)
        AC_SUBST(GNUTLS_CFLAGS)
fi

dnl password encryption
OLDLIBS=$LIBS
LIBS=
case $host_os in
	*dragonfly*)
		AC_SEARCH_LIBS(encrypt, cipher, [], AC_MSG_ERROR(['encrypt'-function not found.]))
	;;
	*)
		AC_SEARCH_LIBS(encrypt, crypt, [], AC_MSG_ERROR(['encrypt'-function not found.]))
	;;
esac
CRYPT_LIBS=$LIBS
AC_SUBST(CRYPT_LIBS)
LIBS=$OLDLIBS

AC_ARG_WITH(passcrypt-key, [  --with-passcrypt-key=KEY     Key used to encode passwords (8 byte string)],
	    with_passcrypt_key="$withval", with_passcrypt_key="passkey0")
AC_SUBST(PASSCRYPT_KEY, $with_passcrypt_key)

dnl RC dir (will be default at a certain point in time)
AC_ARG_WITH(config-dir,    [  --with-config-dir=RCDIR      Local configuration dir (default: .claws-mail)],
	      ac_cv_with_config_dir="$withval", ac_cv_with_config_dir=".claws-mail")
if test x"$ac_cv_with_config_dir" = x""; then
	ac_cv_with_config_dir=".claws-mail"
fi
AC_DEFINE_UNQUOTED(CFG_RC_DIR, "$ac_cv_with_config_dir", Configuration directory)

dnl ************************
dnl ** GTK user interface **
dnl ************************

dnl Checks for GTK
AM_CONDITIONAL(GTK3, false)
AM_CONDITIONAL(GTK2, true)
if test x"$enable_gtk3" = x"yes"; then
	PKG_CHECK_MODULES(GTK, gtk+-3.0 >= 3.0 cairo)
	AM_CONDITIONAL(GTK3, true)
	AM_CONDITIONAL(GTK2, false)
else
	PKG_CHECK_MODULES(GTK, gtk+-2.0 >= 2.16)
fi
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)

dnl enchant is used for spell checking
AC_MSG_CHECKING([whether to use enchant])
AC_MSG_RESULT($enable_enchant)
if test $enable_enchant = yes; then
	PKG_CHECK_MODULES(ENCHANT, enchant >= 1.0.0,
	[
		AC_DEFINE(USE_ENCHANT, 1, enchant)
		echo "Building with enchant"
		enable_enchant=yes
		CFLAGS="$CFLAGS `$PKG_CONFIG --cflags enchant`"
	],
	[
		echo "Building without enchant-notification"
		enable_enchant=no
	])
	AC_SUBST(ENCHANT_CFLAGS)
	AC_SUBST(ENCHANT_LIBS)
fi

dnl want crash dialog
if test $enable_crash_dialog = yes; then
dnl check if GDB is somewhere
	AC_CHECK_PROG(enable_crash_dialog, gdb, yes, no)
	AC_MSG_CHECKING([whether to use crash dialog])
	if test $enable_crash_dialog = yes; then
		AC_DEFINE(CRASH_DIALOG, 1, Pop up crash dialog)
	fi
	AC_MSG_RESULT($enable_crash_dialog)
fi

dnl generic umpc
if test $enable_generic_umpc = yes; then
	AC_DEFINE(GENERIC_UMPC, 1, Generic UMPC code)
	AC_MSG_RESULT($enable_generic_umpc)
fi

dnl Check for X-Face support
AC_MSG_CHECKING([whether to use compface])
if test x"$enable_compface" = xyes; then
	AC_MSG_RESULT(yes)
	AC_CHECK_LIB(compface, uncompface,
		[AC_DEFINE(HAVE_LIBCOMPFACE, 1, Define if you want compface support.)],
		[enable_compface=no])
	if test x"$enable_compface" = xyes; then
		COMPFACE_LIBS="-lcompface"
	else
		COMPFACE_LIBS=""
	fi
	AC_SUBST(COMPFACE_LIBS)
else
	AC_MSG_RESULT(no)
fi

dnl check for pthread support
AC_MSG_CHECKING([whether to use pthread])
if test x$enable_pthread = xno; then
	AC_MSG_RESULT(no)
else
	AC_MSG_RESULT(yes)

        # For W32 we need to use a special ptrhead lib. In this case we can't
        # use AC_CHECK_LIB because it has no means of checking for a
        # library installed under a different name.  Checking for the
        # header is okay.
        if test -n "${pthread_name}" ; then
           enable_pthread=yes
        else
	AC_CHECK_LIB(pthread, pthread_create, :, enable_pthread=no)
        fi
	AC_CHECK_HEADERS(pthread.h, :, enable_pthread=no)

	if test x$enable_pthread = xyes; then
		AC_DEFINE(USE_PTHREAD, 1, Define if you have pthread)
                if test -z "${pthread_name}" ; then
		PTHREAD_LIBS="-lpthread"
	fi
	fi

fi
AC_SUBST(PTHREAD_LIBS)

dnl
dnl Check whether we need to pass -lresolv
dnl We know that we don't need it for W32.
dnl
if test x$os_win32 = xno; then
  t_oldLibs="$LIBS"
  LIBS="$LIBS"
  ac_cv_var__res_options=no
  AC_TRY_LINK([#include <sys/types.h>
 	     #include <sys/socket.h>
	     #include <netinet/in.h>
 	     #include <arpa/nameser.h>
	     #include <resolv.h>],
 	  	[_res.options = RES_INIT;],
 	 	ac_cv_var__res_options=yes);
  if test "$ac_cv_var__res_options" != "yes"; then
	LIBRESOLV="-lresolv"
  fi
  LIBS="$t_oldLibs"

  if test "x$LIBRESOLV" = "x"; then
	AC_CHECK_LIB(resolv, res_query, [LIBRESOLV=-lresolv])
	LIBS="$t_oldLibs"
  fi
fi
AC_SUBST(LIBRESOLV)

LIBS="$LIBS $LIBRESOLV"

dnl #######################################################################
dnl # Check for startup notification
dnl #######################################################################
if test "x$enable_startup_notification" = "xyes"; then
	PKG_CHECK_MODULES(STARTUP_NOTIFICATION, libstartup-notification-1.0 >= 0.5,
	[
		AC_DEFINE(HAVE_STARTUP_NOTIFICATION, 1, [Define if we're using libstartup-notification.])
		echo "Building with libstartup-notification"
		enable_startup_notification=yes
	],
	[
		echo "Building without libstartup-notification"
		enable_startup_notification=no
	])

	AC_SUBST(STARTUP_NOTIFICATION_CFLAGS)
	AC_SUBST(STARTUP_NOTIFICATION_LIBS)
fi

dnl #######################################################################
dnl # Check for D-Bus support
dnl #######################################################################
if test "x$enable_dbus" = "xyes"; then
	PKG_CHECK_MODULES(DBUS, [dbus-1 >= 0.60, dbus-glib-1 >= 0.60],
	[
		AC_DEFINE(HAVE_DBUS_GLIB, 1, [Define if glib bindings of D-Bus are available])
		enable_dbus_glib=yes
	],
	[
		echo "D-Bus requirements not met. D-Bus support not activated."
		enable_dbus_glib=no
	])
	AC_SUBST(DBUS_CFLAGS)
	AC_SUBST(DBUS_LIBS)
fi

dnl #######################################################################
dnl # Configure address book support
dnl #######################################################################

dnl #######################################################################
dnl # Check for new address book support
dnl #######################################################################
AC_MSG_CHECKING([whether DBUS support for new address book is present])
if test x"$enable_dbus_glib" = xyes; then
	AC_MSG_RESULT([yes])
	AC_MSG_CHECKING([whether to enable new address book])
	if test x"$enable_new_addrbook" = xyes; then
		AC_MSG_RESULT([yes])
		PKG_CHECK_MODULES(CONTACTS, [claws-contacts],
		[
			AC_DEFINE(USE_NEW_ADDRBOOK, 1, [Define if new address book is to be activated.])
			enable_new_addrbook=yes
			AC_SUBST(CONTACTS_CFLAGS)
			AC_SUBST(CONTACTS_LIBS)
		],
		[
			enable_new_addrbook=no
		])
	else
		AC_MSG_RESULT([no])
		enable_new_addrbook=no
	fi
else
	AC_MSG_RESULT([no])
	enable_new_addrbook=no
fi

dnl #######################################################################
dnl # Check for old address book support
dnl #######################################################################
if test x"$enable_new_addrbook" = xno; then
	dnl for LDAP support in addressbook
	dnl no check for libraries; dynamically loaded
	AC_MSG_CHECKING([whether to use LDAP])
	if test x"$enable_ldap" = xno; then
		AC_MSG_RESULT(no)
	elif test x"$enable_ldap" = xyes -a x"$enable_pthread" = xno; then
		AC_MSG_RESULT(no - LDAP support needs pthread support)

		enable_ldap=no
	elif test x"$platform_win32" = xyes; then
		AC_MSG_RESULT(yes)
		AC_DEFINE(USE_LDAP, 1, Define if you want LDAP support in addressbook.)
		LDAP_LIBS="-lwldap32"
		AC_SUBST(LDAP_LIBS)
	else
		AC_MSG_RESULT(yes)

		dnl check for available libraries, and pull them in
		AC_CHECK_LIB(resolv, res_query, LDAP_LIBS="$LDAP_LIBS -lresolv")
		AC_CHECK_LIB(socket, bind, LDAP_LIBS="$LDAP_LIBS -lsocket")
		AC_CHECK_LIB(nsl, gethostbyaddr, LDAP_LIBS="$LDAP_LIBS -lnsl")
		AC_CHECK_LIB(lber, ber_get_tag, LDAP_LIBS="$LDAP_LIBS -llber",,
				 $LDAP_LIBS)

		AC_CHECK_HEADERS(ldap.h lber.h,
				 [ enable_ldap=yes ],
				 [ enable_ldap=no ])

		if test "$enable_ldap" = yes; then
			AC_CHECK_LIB(ldap, ldap_open,
					 [ enable_ldap=yes ],
					 [ enable_ldap=no ],
					 $LDAP_LIBS)

			AC_CHECK_LIB(ldap, ldap_start_tls_s,
			 		     [ ac_cv_have_tls=yes ],
			 		     [ ac_cv_have_tls=no ])

		fi

		AC_MSG_CHECKING([whether ldap library is available])
		AC_MSG_RESULT($enable_ldap)

		AC_MSG_CHECKING([whether TLS library is available])
		AC_MSG_RESULT($ac_cv_have_tls)

		if test "$enable_ldap" = yes; then
			AC_DEFINE(USE_LDAP, 1, Define if you want LDAP support in addressbook.)
			LDAP_LIBS="$LDAP_LIBS -lldap"
			AC_SUBST(LDAP_LIBS)
			if test "$ac_cv_have_tls" = yes; then
				AC_DEFINE(USE_LDAP_TLS, 1, Define if you want LDAP TLS support in addressbook.)
			fi
			dnl As of OpenLDAP API version 3000 a number of functions has
			dnl been deprecated. As Claws-mail compiles and runs on many
			dnl platforms and many versions of OpenLDAP we need to be able
			dnl to switch between the old and new API because new API has
			dnl added new functions replacing old ones and at the same time
			dnl old functions has been changed.
			dnl If cross-compiling defaults to enable deprecated features
			dnl for maximum portability
			AC_MSG_CHECKING([The API version of OpenLDAP])
			AC_RUN_IFELSE(
				[AC_LANG_PROGRAM(
				 [#include <ldap.h>],
				 [if (LDAP_API_VERSION >= 3000)
						return 1
				])],
				[AC_MSG_RESULT([version < 3000])
				 AC_DEFINE(OPEN_LDAP_API_AT_LEAST_3000, 0, Define if OpenLDAP API is at least version 3000.)],
				[AC_MSG_RESULT([version >= 3000])
				 AC_DEFINE(OPEN_LDAP_API_AT_LEAST_3000, 1, Define if OpenLDAP API is at least version 3000.)],
				[AC_MSG_RESULT([Enabling deprecated features in OpenLDAP])
				 AC_DEFINE(OPEN_LDAP_API_AT_LEAST_3000, 0, Define if OpenLDAP API is at least version 3000.)
				 AC_DEFINE(LDAP_DEPRECATED, 1, Define to activate deprecated features in OpenLDAP)]
			)
		fi
	fi

	dnl for JPilot support in addressbook
	dnl no check for libraries; these are dynamically loaded
	AC_MSG_CHECKING([whether to use JPilot])
	if test "$enable_jpilot" = yes; then
		AC_MSG_RESULT(yes)
		AC_CHECK_HEADERS(pi-args.h pi-appinfo.h pi-address.h pi-version.h,
				 [ AC_DEFINE(USE_JPILOT, 1, Define if you want JPilot support in addressbook.) ],
				 [ enable_jpilot=no ])
		if test "$enable_jpilot" = no; then
			AC_CHECK_HEADERS(libpisock/pi-args.h libpisock/pi-appinfo.h libpisock/pi-address.h libpisock/pi-version.h,
					 [ enable_jpilot=yes
					   AC_DEFINE(USE_JPILOT, 1, Define if you want JPilot support in addressbook.) ])
		fi

		AC_CHECK_LIB(pisock, unpack_Address, [JPILOT_LIBS="-lpisock"], [JPILOT_LIBS="" enable_jpilot="no"])
		if test x"$enable_jpilot" = xyes; then
			AC_DEFINE(USE_JPILOT, 1, Define if you want JPilot support in addressbook.)
		else
			AC_MSG_NOTICE([JPilot support not available])
		fi
		AC_SUBST(JPILOT_LIBS)
	else
		AC_MSG_RESULT(no)
	fi
fi

AM_CONDITIONAL(BUILD_NEWADDRBOOK, test x"$enable_new_addrbook" = x"yes")

dnl #######################################################################
dnl # Check for NetworkManager support
dnl #######################################################################
if test x"$enable_dbus_glib" = xyes; then
	if test x"$enable_networkmanager" = xyes; then
		PKG_CHECK_MODULES(NETWORKMANAGER_SUPPORT, NetworkManager >= 0.6.2,
		[
			AC_DEFINE(HAVE_NETWORKMANAGER_SUPPORT, 1, [Define if NetworkManager support is to be included.])
			echo "Building with NetworkManager support"
			enable_networkmanager=yes
		],
		[
			echo "NetworkManager not found."
			enable_networkmanager=no
		])
		AC_SUBST(NETWORKMANAGER_SUPPORT_CFLAGS)
	fi
else
	echo "NetworkManager support deactivated as D-Bus requirements were not met."
	enable_networkmanager=no
fi

dnl Libetpan
AC_MSG_CHECKING([whether to use libetpan])
if test x"$enable_libetpan" = xyes; then
	AC_MSG_RESULT(yes)
	libetpan_result=no
	AC_PATH_PROG(libetpanconfig, [libetpan-config])
	if test "x$libetpanconfig" != "x"; then
	  CPPFLAGS="$CPPFLAGS `$libetpanconfig --cflags 2>/dev/null`"
	  AC_CHECK_HEADER(libetpan/libetpan.h, [libetpan_result=yes])
	  if test "x$libetpan_result" = "xyes"; then
	    AC_MSG_CHECKING([whether libetpan-config hints compiles and links fine])
	    LIBS="$LIBS `$libetpanconfig --libs 2>/dev/null`"
	    AC_TRY_LINK([#include <libetpan/dbstorage.h>], [db_mailstorage_init(NULL, NULL);], [libetpan_result=yes], [libetpan_result=no])
	    AC_MSG_RESULT([$libetpan_result])
	  fi
	fi
	if test "x$libetpan_result" = "xyes"; then
	   LIBETPAN_CPPFLAGS="`$libetpanconfig --cflags`"
	   LIBETPAN_LIBS="`$libetpanconfig --libs`"
           LIBETPAN_STABLE=`$libetpanconfig --version | grep -v ^0`
	   LIBETPAN_VERSION=`$libetpanconfig --version | sed "s/\.//g" | sed "s/-.*$//"`
           if test x"$LIBETPAN_STABLE" != "x"; then
                LIBETPAN_VERSION="100"
           fi
	   if test "$LIBETPAN_VERSION" -lt "057"; then
		AC_MSG_RESULT([*** Claws Mail requires libetpan 0.57 or newer. See http://www.etpan.org/])
		AC_MSG_RESULT([*** You can use --disable-libetpan if you don't need IMAP4 and/or NNTP support.])
                AC_MSG_ERROR([libetpan 0.57 not found])
	   fi
	   AC_SUBST(LIBETPAN_FLAGS)
	   AC_SUBST(LIBETPAN_LIBS)
	   AC_DEFINE(HAVE_LIBETPAN, 1, Define if you want IMAP and/or NNTP support.)
	else
	   AC_MSG_RESULT([*** Claws Mail requires libetpan 0.57 or newer. See http://www.etpan.org/ ])
	   AC_MSG_RESULT([*** You can use --disable-libetpan if you don't need IMAP4 and/or NNTP support.])
           AC_MSG_ERROR([libetpan 0.57 not found])
	fi
else
	AC_MSG_RESULT(no)
fi
AM_CONDITIONAL(CLAWS_LIBETPAN, test "x$libetpan_result" = "xyes")

AC_MSG_CHECKING([whether to use valgrind])
if test x$enable_valgrind = xyes; then
	AC_MSG_RESULT(yes)
	PKG_CHECK_MODULES(VALGRIND, valgrind >= 2.4.0,
			  enable_valgrind=yes, enable_valgrind=no)
	if test x"$enable_valgrind" = xyes; then
		AC_DEFINE(HAVE_VALGRIND, 1, Define if you want valgrind support)
	else
		AC_MSG_RESULT(not found)
	fi
else
	AC_MSG_RESULT(no)
fi
AM_CONDITIONAL(CLAWS_VALGRIND, test x"$enable_valgrind" = x"yes")

dnl *************************
dnl ** section for plugins **
dnl *************************

PLUGINS=""
DISABLED_PLUGINS=""
MISSING_DEPS_PLUGINS=""

dnl First we set the enabled status - either enabled (yes), auto-enabled (auto)
dnl or (auto-)disabled (no for both)
dnl
dnl All plugins are auto-enabled except for Demo which is just there to help
dnl potential plugins writers.

AC_ARG_ENABLE(acpi_notifier-plugin,
		[  --disable-acpi_notifier-plugin  Do not build acpi_notifier plugin],
		[enable_acpi_notifier_plugin=$enableval], [enable_acpi_notifier_plugin=auto])

AC_ARG_ENABLE(address_keeper-plugin,
		[  --disable-address_keeper-plugin Do not build address_keeper plugin],
		[enable_address_keeper_plugin=$enableval], [enable_address_keeper_plugin=auto])

AC_ARG_ENABLE(archive-plugin,
		[  --disable-archive-plugin        Do not build archive plugin],
		[enable_archive_plugin=$enableval], [enable_archive_plugin=auto])

AC_ARG_ENABLE(att_remover-plugin,
		[  --disable-att_remover-plugin    Do not build att_remover plugin],
		[enable_att_remover_plugin=$enableval], [enable_att_remover_plugin=auto])

AC_ARG_ENABLE(attachwarner-plugin,
		[  --disable-attachwarner-plugin   Do not build attachwarner plugin],
		[enable_attachwarner_plugin=$enableval], [enable_attachwarner_plugin=auto])

AC_ARG_ENABLE(bogofilter-plugin,
		[  --disable-bogofilter-plugin     Do not build bogofilter plugin],
		[enable_bogofilter_plugin=$enableval], [enable_bogofilter_plugin=auto])

AC_ARG_ENABLE(bsfilter-plugin,
		[  --disable-bsfilter-plugin       Do not build bsfilter plugin],
		[enable_bsfilter_plugin=$enableval], [enable_bsfilter_plugin=auto])

AC_ARG_ENABLE(clamd-plugin,
		[  --disable-clamd-plugin          Do not build clamd plugin],
		[enable_clamd_plugin=$enableval], [enable_clamd_plugin=auto])

AC_ARG_ENABLE(fancy-plugin,
		[  --disable-fancy-plugin          Do not build fancy plugin],
		[enable_fancy_plugin=$enableval], [enable_fancy_plugin=auto])

AC_ARG_ENABLE(fetchinfo-plugin,
		[  --disable-fetchinfo-plugin      Do not build fetchinfo plugin],
		[enable_fetchinfo_plugin=$enableval], [enable_fetchinfo_plugin=auto])

AC_ARG_ENABLE(gdata-plugin,
		[  --disable-gdata-plugin          Do not build gdata plugin],
		[enable_gdata_plugin=$enableval], [enable_gdata_plugin=auto])

AC_ARG_ENABLE(geolocation-plugin,
		[  --disable-geolocation-plugin    Do not build geolocation plugin],
		[enable_geolocation_plugin=$enableval], [enable_geolocation_plugin=auto])

AC_ARG_ENABLE(libravatar-plugin,
		[  --disable-libravatar-plugin     Do not build libravatar  plugin],
		[enable_libravatar_plugin=$enableval], [enable_libravatar_plugin=auto])

AC_ARG_ENABLE(mailmbox-plugin,
		[  --disable-mailmbox-plugin       Do not build mailmbox plugin],
		[enable_mailmbox_plugin=$enableval], [enable_mailmbox_plugin=auto])

AC_ARG_ENABLE(managesieve-plugin,
		[  --disable-managesieve-plugin       Do not build managesieve plugin],
		[enable_managesieve_plugin=$enableval], [enable_managesieve_plugin=auto])

AC_ARG_ENABLE(newmail-plugin,
		[  --disable-newmail-plugin        Do not build newmail plugin],
		[enable_newmail_plugin=$enableval], [enable_newmail_plugin=auto])

AC_ARG_ENABLE(notification-plugin,
		[  --disable-notification-plugin   Do not build notification plugin],
		[enable_notification_plugin=$enableval], [enable_notification_plugin=auto])

AC_ARG_ENABLE(pdf_viewer-plugin,
		[  --disable-pdf_viewer-plugin     Do not build pdf_viewer plugin],
		[enable_pdf_viewer_plugin=$enableval], [enable_pdf_viewer_plugin=auto])

AC_ARG_ENABLE(perl-plugin,
		[  --disable-perl-plugin           Do not build perl plugin],
		[enable_perl_plugin=$enableval], [enable_perl_plugin=auto])

AC_ARG_ENABLE(python-plugin,
		[  --disable-python-plugin         Do not build python plugin],
		[enable_python_plugin=$enableval], [enable_python_plugin=auto])

AC_ARG_ENABLE(pgpcore-plugin,
		[  --disable-pgpcore-plugin        Do not build pgpcore plugin],
		[enable_pgpcore_plugin=$enableval], [enable_pgpcore_plugin=auto])

AC_ARG_ENABLE(pgpmime-plugin,
		[  --disable-pgpmime-plugin        Do not build pgpmime plugin],
		[enable_pgpmime_plugin=$enableval], [enable_pgpmime_plugin=auto])

AC_ARG_ENABLE(pgpinline-plugin,
		[  --disable-pgpinline-plugin      Do not build pgpinline plugin],
		[enable_pgpinline_plugin=$enableval], [enable_pgpinline_plugin=auto])

AC_ARG_ENABLE(qr-avatar-plugin,
		[  --disable-qr-avatar-plugin      Do not build qr-avatar plugin],
		[enable_qr_avatar_plugin=$enableval], [enable_qr_avatar_plugin=auto])

AC_ARG_ENABLE(rssyl-plugin,
		[  --disable-rssyl-plugin          Do not build rssyl plugin],
		[enable_rssyl_plugin=$enableval], [enable_rssyl_plugin=auto])

AC_ARG_ENABLE(smime-plugin,
		[  --disable-smime-plugin          Do not build smime plugin],
		[enable_smime_plugin=$enableval], [enable_smime_plugin=auto])

AC_ARG_ENABLE(spamassassin-plugin,
		[  --disable-spamassassin-plugin   Do not build spamassassin plugin],
		[enable_spamassassin_plugin=$enableval], [enable_spamassassin_plugin=auto])

AC_ARG_ENABLE(spam_report-plugin,
		[  --disable-spam_report-plugin    Do not build spam_report plugin],
		[enable_spam_report_plugin=$enableval], [enable_spam_report_plugin=auto])

AC_ARG_ENABLE(tnef_parse-plugin,
		[  --disable-tnef_parse-plugin     Do not build tnef_parse plugin],
		[enable_tnef_parse_plugin=$enableval], [enable_tnef_parse_plugin=auto])

AC_ARG_ENABLE(vcalendar-plugin,
		[  --disable-vcalendar-plugin      Do not build vcalendar plugin],
		[enable_vcalendar_plugin=$enableval], [enable_vcalendar_plugin=auto])

dnl disabled by default
AC_ARG_ENABLE(demo-plugin,
		[  --enable-demo-plugin		Build demo plugin],
		[enable_demo_plugin=$enableval], [enable_demo_plugin=no])


dnl Then we check (unconditionnaly) for plugins dependencies
dnl Some dependencies are optional, some mandatories. This is taken care of
dnl later.
dnl
dnl During this dependancy check we do the checks themselves, define HAVE_X to
dnl either yes or no, and do the AC_SUBST calls.

dnl Archive:		libarchive
dnl Fancy:		Webkit, curl, optionally libsoup-gnome
dnl Gdata:		libgdata
dnl Geolocation:	libchamplain, libsoup
dnl Libravatar:		libcurl
dnl Notification:	optionally libnotify libindicate libcanberra_gtk hotkey
dnl Pdf-Viewer:		libpoppler
dnl Perl:		sed perl
dnl PGP/Core:		libgpgme
dnl PGP/Mime:		pgpcore libgpgme
dnl PGP/Inline:		pgpcore libgpgme
dnl S/Mime:		pgpcore libgpgme
dnl Python:		Python
dnl RSSyl:		expat libcurl
dnl QR-Avatar:		libqrencode
dnl SpamReport:		libcurl
dnl vCalendar:		libcurl

dnl libcurl ********************************************************************
PKG_CHECK_MODULES(CURL, libcurl, HAVE_CURL=yes, HAVE_CURL=no)
AC_SUBST(CURL_LIBS)
AC_SUBST(CURL_CFLAGS)

dnl expat **********************************************************************
PKG_CHECK_MODULES(EXPAT, expat, HAVE_EXPAT=yes, HAVE_EXPAT=no)

if test x"$HAVE_EXPAT" = xno; then
	AC_CHECK_HEADER(expat.h, [expat_header=yes], [expat_header=no])
	AC_CHECK_LIB(expat, XML_ParserCreate, [expat_lib=yes], [expat_lib=no])
	if test x"$expat_header" = xyes -a x"$expat_lib"=xyes; then
		HAVE_EXPAT=yes
		EXPAT_CFLAGS=""
		EXPAT_LIBS="-lexpat"
	fi
fi

AC_SUBST(EXPAT_CFLAGS)
AC_SUBST(EXPAT_LIBS)

dnl libqrencode ****************************************************************
PKG_CHECK_MODULES(QRENCODE, libqrencode, HAVE_QRENCODE=yes, HAVE_QRENCODE=no)
AC_SUBST(QRENCODE_LIBS)
AC_SUBST(QRENCODE_CFLAGS)

dnl webkit *********************************************************************
PKG_CHECK_MODULES(WEBKIT, webkit-1.0 >= 1.1.14, HAVE_WEBKIT=yes, HAVE_WEBKIT=no)
AC_SUBST(WEBKIT_LIBS)
AC_SUBST(WEBKIT_CFLAGS)

dnl libsoup ********************************************************************
PKG_CHECK_MODULES(LIBSOUP, libsoup-2.4, HAVE_LIBSOUP=yes, HAVE_LIBSOUP=no)
if test x"$HAVE_LIBSOUP" = xyes; then
	AC_DEFINE(HAVE_LIBSOUP, 1, [Define if libsoup is available])
fi
AC_SUBST(LIBSOUP_CFLAGS)
AC_SUBST(LIBSOUP_LIBS)

dnl libsoup-gnome **************************************************************
PKG_CHECK_MODULES(LIBSOUP_GNOME, libsoup-gnome-2.4 >= 2.26, HAVE_LIBSOUP_GNOME=yes, HAVE_LIBSOUP_GNOME=no)
if test x"$HAVE_LIBSOUP_GNOME" = xyes; then
	AC_DEFINE(HAVE_LIBSOUP_GNOME, 1, [Define if libsoup_gnome is available])
fi
AC_SUBST(LIBSOUP_GNOME_CFLAGS)
AC_SUBST(LIBSOUP_GNOME_LIBS)

dnl libarchive *****************************************************************
AC_CHECK_LIB([archive], [archive_read_new],
		       ARCHIVE_LIBS=-larchive
		       HAVE_ARCHIVE=yes
		       AC_SUBST(ARCHIVE_LIBS),
		       HAVE_ARCHIVE=no
		       )

dnl libgdata *******************************************************************
PKG_CHECK_MODULES(GDATA, libgdata >= 0.17.2, HAVE_GDATA=yes, HAVE_GDATA=no)
AC_SUBST(GDATA_CFLAGS)
AC_SUBST(GDATA_LIBS)

dnl Poppler ********************************************************************
PKG_CHECK_MODULES(POPPLER, poppler-glib >= 0.12.0, HAVE_POPPLER=yes, HAVE_POPPLER=no)
AC_SUBST(POPPLER_LIBS)
AC_SUBST(POPPLER_CFLAGS)

dnl check for Poppler extra features that we conditionally support
if test x"$HAVE_POPPLER" = xyes; then
	OLD_CFLAGS=$CFLAGS
	CFLAGS="$POPPLER_CFLAGS $GTK_CFLAGS $GLIB_CFLAGS"
	AC_CHECK_DECL(POPPLER_DEST_NAMED,
		[AC_DEFINE([HAVE_POPPLER_DEST_NAMED], [], [Description])],
		,[#include <poppler-action.h>])
	AC_CHECK_DECL(POPPLER_DEST_XYZ,
		[AC_DEFINE([HAVE_POPPLER_DEST_XYZ], [], [Description])],
		,[#include <poppler-action.h>])
	CFLAGS=$OLD_CFLAGS
fi

dnl perl ***********************************************************************
AC_CHECK_PROG(HAVE_PERL, perl, yes, no)
if test x"$HAVE_PERL" = xyes; then
	AC_MSG_CHECKING(for perl >= 5.8.0)
	PERL_VER=`perl -e 'print $] > 5.0079999?"yes":"no"'`
	if test "$PERL_VER" = "yes"; then
		AC_MSG_RESULT(yes)
	else
		AC_MSG_RESULT(no)
		HAVE_PERL=no
	fi
fi
if test x"$HAVE_PERL" = xyes; then
	AC_MSG_CHECKING(for Perl compile flags)
	PERL_CFLAGS=`perl -MExtUtils::Embed -e ccopts`
	PERL_CFLAGS=`echo $PERL_CFLAGS | sed 's/-D_FILE_OFFSET_BITS=[[0-9]]*//'`
	PERL_LDFLAGS=`perl -MExtUtils::Embed -e ldopts |sed 's/-lgdbm//'`
	PERL_LDFLAGS=`echo $PERL_LDFLAGS |sed 's/-ldb//'`
	PERL_LDFLAGS=`echo $PERL_LDFLAGS |sed 's/-lndbm//'`
	PERL_LDFLAGS=`echo $PERL_LDFLAGS |sed 's/-lc//'`
	AC_MSG_RESULT(ok)
	AC_MSG_NOTICE([Adding perl LIBS ${PERL_CFLAGS}])
	
	if test x"$HAVE_PERL" = xyes; then
		AC_CHECK_LIB(perl,perl_alloc,[AC_DEFINE(HAVE_LIBPERL, 1, Check for libperl.)], 
			 		     [ HAVE_LIBPERL=no ])
	fi
	if test x"$HAVE_LIBPERL" = xno; then
		LIBPERL_PREFIX=`perl -MExtUtils::Embed -e perl_inc`
		LIBPERL_PREFIX=`echo $LIBPERL_PREFIX |sed 's/-I//'`
		AC_MSG_CHECKING([for libperl.so])
		if test -f "$LIBPERL_PREFIX/libperl.so"; then
			AC_MSG_RESULT(yes)
			HAVE_LIBPERL=yes
		else
			AC_MSG_RESULT(no)
		fi	
	fi
	PERL="perl"
	AC_SUBST(PERL)
	AC_SUBST(PERL_CFLAGS)
	AC_SUBST(PERL_LDFLAGS)
fi

dnl Gpgme **********************************************************************
AM_PATH_GPGME(1.0.0, HAVE_GPGME=yes, HAVE_GPGME=no)
if test x"$HAVE_GPGME" = xyes; then
	AC_DEFINE(USE_GPGME, 1, Define if you use GPGME to support OpenPGP.)
	AM_PATH_GPGME(1.1.1, AC_DEFINE(HAVE_GPGME_PKA_TRUST, 1, [Define if GPGME supports PKA.]))
fi

dnl Python *********************************************************************
AM_PATH_PYTHON([2.5], [
	AC_PATH_PROG(PYTHON_CONFIG, python$PYTHON_VERSION-config)
	if test x"$PYTHON_CONFIG" = x"" ; then
		AC_PATH_PROG(PYTHON_CONFIG, python-config)
	fi
	if test x"$PYTHON_CONFIG" != x""; then
		PYTHON_CFLAGS=`$PYTHON_CONFIG --includes`
		PYTHON_LIBS=`$PYTHON_CONFIG --libs`
		PYTHON_PREFIX=`$PYTHON_CONFIG --prefix`
		HAVE_PYTHON=yes
	else
		AC_MSG_WARN(python-config not found. Maybe you need to install development packages for Python.)
		HAVE_PYTHON=no
	fi

	if test x"$HAVE_PYTHON" = xyes; then
		_save_libs="$LIBS"
		if test x"$platform_win32" = xno; then
			# libpython.so
			PYTHON_SHARED_LIB="libpython${PYTHON_VERSION}.so"
			LIBS="-ldl"
			AC_MSG_CHECKING([whether to dlopen $PYTHON_SHARED_LIB works])
			AC_RUN_IFELSE(
				[AC_LANG_PROGRAM(
					[#include <dlfcn.h>
					 #define PYTHON_SO_FILE "${PYTHON_SHARED_LIB}"
					],
					[if (!dlopen(PYTHON_SO_FILE, RTLD_NOW | RTLD_GLOBAL)) return 1; return 0;])
				],
				[found_libpython_so="yes"],
				[found_libpython_so="no"],
				[AC_MSG_FAILURE([cross-compiling not supported])])
		fi
		if test x"$found_libpython_so" != x"yes"; then
			AC_MSG_RESULT(no)
			AC_MSG_WARN(Could not find Python shared libary: ${PYTHON_SHARED_LIB}. Maybe you need to install development packages for Python.)
			HAVE_PYTHON=no
		else
			AC_MSG_RESULT(yes)
		fi
		LIBS="$_save_libs";
	fi
	if test x"$HAVE_PYTHON" = xyes; then
		PKG_CHECK_MODULES(PYGTK, pygtk-2.0 >= 2.10.3, [AC_DEFINE(ENABLE_PYTHON, [1], [Enable Python support])], HAVE_PYTHON=no)
	fi
])
AC_SUBST(PYTHON_SHARED_LIB)
AC_SUBST(PYTHON_CFLAGS)
AC_SUBST(PYTHON_LIBS)
AC_SUBST(PYGTK_CFLAGS)
AC_SUBST(PYGTK_LIBS)

dnl libnotify ******************************************************************
PKG_CHECK_MODULES(libnotify, libnotify >= 0.4.3, HAVE_LIBNOTIFY=yes, HAVE_LIBNOTIFY=no)
if test x"$HAVE_LIBNOTIFY" = xyes; then
	AC_DEFINE(HAVE_LIBNOTIFY, 1, [Define if libnotify support is enabled])
fi
AC_SUBST(libnotify_CFLAGS)
AC_SUBST(libnotify_LIBS)

dnl libcanberra-gtk ************************************************************
PKG_CHECK_MODULES(libcanberra_gtk, libcanberra-gtk >= 0.6, HAVE_LIBCANBERRA_GTK=yes, HAVE_LIBCANBERRA_GTK=no)
if test x"$HAVE_LIBCANBERRA_GTK" = xyes; then
	AC_DEFINE(HAVE_LIBCANBERRA_GTK, 1, [Define if libcanberra-gtk support is enabled])
fi
AC_SUBST(libcanberra_gtk_CFLAGS)
AC_SUBST(libcanberra_gtk_LIBS)

dnl libindicate ****************************************************************
dnl We support either 0.3+ or 0.5+ or 0.6+ or 0.7+
LIBINDICATE_MODULE=indicate
LIBINDICATE_REQUIRED=0.3.0

PKG_CHECK_EXISTS(indicate-0.5 >= 0.5.0, LIBINDICATE_MODULE=indicate-0.5)
PKG_CHECK_EXISTS(indicate-0.6 >= 0.6.0, LIBINDICATE_MODULE=indicate-0.6)
PKG_CHECK_EXISTS(indicate-0.7 >= 0.7.0, LIBINDICATE_MODULE=indicate-0.7)
PKG_CHECK_MODULES(libindicate, $LIBINDICATE_MODULE >= $LIBINDICATE_REQUIRED, HAVE_LIBINDICATE=yes, HAVE_LIBINDICATE=no)
if test x"$HAVE_LIBINDICATE" = xyes; then
	AC_DEFINE(NOTIFICATION_INDICATOR, 1, [Activate support for indicators])
fi
AC_SUBST(libindicate_CFLAGS)
AC_SUBST(libindicate_LIBS)

dnl hotkeys ********************************************************************
PKG_CHECK_MODULES(CM_NP_HOTKEY, [gio-2.0 >= 2.15.6 gio-unix-2.0 >= 2.15.6], HAVE_HOTKEYS=yes, HAVE_HOTKEYS=no)
if test x"$HAVE_HOTKEYS" = xyes; then
	AC_DEFINE(NOTIFICATION_HOTKEYS, 1, Activate support for global hotkeys)
fi
AC_SUBST(CM_NP_HOTKEY_CFLAGS)
AC_SUBST(CM_NP_HOTKEY_LIBS)

dnl libchamplain ***************************************************************
CHAMPLAIN_MODULE=champlain-gtk-0.4
CHAMPLAIN_VERSION=0.4.0
PKG_CHECK_EXISTS(champlain-gtk-0.6 > 0.6.0,[CHAMPLAIN_MODULE=champlain-gtk-0.6
	CHAMPLAIN_VERSION=0.6.0], [])
PKG_CHECK_EXISTS(champlain-gtk-0.8 > 0.8.0,[CHAMPLAIN_MODULE=champlain-gtk-0.8
	CHAMPLAIN_VERSION=0.8.0], [])
PKG_CHECK_MODULES(CHAMPLAIN, [$CHAMPLAIN_MODULE >= $CHAMPLAIN_VERSION clutter-gtk-0.10], HAVE_CHAMPLAIN=yes, HAVE_CHAMPLAIN=no)
AC_SUBST(CHAMPLAIN_CFLAGS)
AC_SUBST(CHAMPLAIN_LIBS)

dnl Third, we now cross the requested plugins and the available dependencies
dnl If some dependencies are missing and the plugin was explicitely enabled,
dnl we error out, else we only inform.

AC_MSG_CHECKING([whether to build acpi_notifier plugin])
if test x"$enable_acpi_notifier_plugin" != xno; then
	PLUGINS="$PLUGINS acpi_notifier"
	AC_MSG_RESULT(yes)
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS acpi_notifier"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build address_keeper plugin])
if test x"$enable_address_keeper_plugin" != xno; then
	PLUGINS="$PLUGINS address_keeper"
	AC_MSG_RESULT(yes)
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS address_keeper"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build archive plugin])
if test x"$enable_archive_plugin" != xno; then
	dependencies_missing=""

	if test x"$HAVE_ARCHIVE" = xno; then
		dependencies_missing="libarchive $dependencies_missing"
	fi

	if test x"$dependencies_missing" = x; then
		PLUGINS="$PLUGINS archive"
		AC_MSG_RESULT(yes)
	elif test x"$enable_archive_plugin" = xauto; then
		AC_MSG_RESULT(no)
		AC_MSG_WARN("Plugin archive will not be built; missing $dependencies_missing")
		enable_archive_plugin=no
		MISSING_DEPS_PLUGINS="$MISSING_DEPS_PLUGINS archive"
	else
		AC_MSG_RESULT(no)
		AC_MSG_ERROR("Plugin archive cannot be built; missing $dependencies_missing")
	fi
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS archive"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build att_remover plugin])
if test x"$enable_att_remover_plugin" != xno; then
	PLUGINS="$PLUGINS att_remover"
	AC_MSG_RESULT(yes)
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS att_remover"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build attachwarner plugin])
if test x"$enable_attachwarner_plugin" != xno; then
	PLUGINS="$PLUGINS attachwarner"
	AC_MSG_RESULT(yes)
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS attachwarner"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build bogofilter plugin])
if test x"$enable_bogofilter_plugin" != xno; then
	PLUGINS="$PLUGINS bogofilter"
	AC_MSG_RESULT(yes)
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS bogofilter"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build bsfilter plugin])
if test x"$enable_bsfilter_plugin" != xno; then
	PLUGINS="$PLUGINS bsfilter"
	AC_MSG_RESULT(yes)
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS bsfilter"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build clamd plugin])
if test x"$enable_clamd_plugin" != xno; then
	PLUGINS="$PLUGINS clamd"
	AC_MSG_RESULT(yes)
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS clamd"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build demo plugin])
if test x"$enable_demo_plugin" != xno; then
	PLUGINS="$PLUGINS demo"
	AC_MSG_RESULT(yes)
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS demo"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build fancy plugin])
if test x"$enable_fancy_plugin" != xno; then
	dependencies_missing=""

	if test x"$HAVE_WEBKIT" = xno; then
		dependencies_missing="libwebkit-1.0 $dependencies_missing"
	fi
	if test x"$HAVE_CURL" = xno; then
		dependencies_missing="libcurl $dependencies_missing"
	fi

	if test x"$dependencies_missing" = x; then
		PLUGINS="$PLUGINS fancy"
		AC_MSG_RESULT(yes)
	elif test x"$enable_fancy_plugin" = xauto; then
		AC_MSG_RESULT(no)
		AC_MSG_WARN("Plugin fancy will not be built; missing $dependencies_missing")
		enable_fancy_plugin=no
		MISSING_DEPS_PLUGINS="$MISSING_DEPS_PLUGINS fancy"
	else
		AC_MSG_RESULT(no)
		AC_MSG_ERROR("Plugin fancy cannot be built; missing $dependencies_missing")
	fi
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS fancy"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build fetchinfo plugin])
if test x"$enable_fetchinfo_plugin" != xno; then
	PLUGINS="$PLUGINS fetchinfo"
	AC_MSG_RESULT(yes)
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS fetchinfo"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build gdata plugin])
if test x"$enable_gdata_plugin" != xno; then
	dependencies_missing=""

	if test x"$HAVE_GDATA" = xno; then
		dependencies_missing="libgdata $dependencies_missing"
	fi

	if test x"$dependencies_missing" = x; then
		PLUGINS="$PLUGINS gdata"
		AC_MSG_RESULT(yes)
	elif test x"$enable_gdata_plugin" = xauto; then
		AC_MSG_RESULT(no)
		AC_MSG_WARN("Plugin gdata will not be built; missing $dependencies_missing")
		enable_gdata_plugin=no
		MISSING_DEPS_PLUGINS="$MISSING_DEPS_PLUGINS gdata"
	else
		AC_MSG_RESULT(no)
		AC_MSG_ERROR("Plugin gdata cannot be built; missing $dependencies_missing")
	fi
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS gdata"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build geolocation plugin])
if test x"$enable_geolocation_plugin" != xno; then
	dependencies_missing=""

	if test x"$HAVE_CHAMPLAIN" = xno; then
		dependencies_missing="libchamplain $dependencies_missing"
	fi

	if test x"$dependencies_missing" = x; then
		PLUGINS="$PLUGINS geolocation"
		AC_MSG_RESULT(yes)
	elif test x"$enable_geolocation_plugin" = xauto; then
		AC_MSG_RESULT(no)
		AC_MSG_WARN("Plugin geolocation will not be built; missing $dependencies_missing")
		enable_geolocation_plugin=no
		MISSING_DEPS_PLUGINS="$MISSING_DEPS_PLUGINS geolocation"
	else
		AC_MSG_RESULT(no)
		AC_MSG_ERROR("Plugin geolocation cannot be built; missing $dependencies_missing")
	fi
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS geolocation"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build libravatar plugin])
if test x"$enable_libravatar_plugin" != xno; then
	dependencies_missing=""

	if test x"$HAVE_CURL" = xno; then
		dependencies_missing="libcurl $dependencies_missing"
	fi

	if test x"$dependencies_missing" = x; then
		PLUGINS="$PLUGINS libravatar"
		AC_MSG_RESULT(yes)
	elif test x"$enable_libravatar_plugin" = xauto; then
		AC_MSG_RESULT(no)
		AC_MSG_WARN("Plugin libravatar will not be built; missing $dependencies_missing")
		enable_libravatar_plugin=no
		MISSING_DEPS_PLUGINS="$MISSING_DEPS_PLUGINS libravatar"
	else
		AC_MSG_RESULT(no)
		AC_MSG_ERROR("Plugin libravatar cannot be built; missing $dependencies_missing")
	fi
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS libravatar"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build mailmbox plugin])
if test x"$enable_mailmbox_plugin" != xno; then
	PLUGINS="$PLUGINS mailmbox"
	AC_MSG_RESULT(yes)
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS mailmbox"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build managesieve plugin])
if test x"$enable_managesieve_plugin" != xno; then
	PLUGINS="$PLUGINS managesieve"
	AC_MSG_RESULT(yes)
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS managesieve"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build newmail plugin])
if test x"$enable_newmail_plugin" != xno; then
	PLUGINS="$PLUGINS newmail"
	AC_MSG_RESULT(yes)
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS newmail"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build notification plugin])
if test x"$enable_notification_plugin" != xno; then
	PLUGINS="$PLUGINS notification"
	AC_MSG_RESULT(yes)

	AC_DEFINE(NOTIFICATION_POPUP, 1, Activate notification popup)
	AC_DEFINE(NOTIFICATION_BANNER, 1, Activate notification banner)
	AC_DEFINE(NOTIFICATION_COMMAND, 1, Activate notification shell command)
	AC_DEFINE(NOTIFICATION_TRAYICON, 1, Activate notification trayicon)
	if test x"$platform_win32" = xno; then
		AC_DEFINE(NOTIFICATION_LCDPROC, 1, Activate lcdproc support)
	fi

	notification_features="banner command"
	notification_missing_dependencies=""
	if test x"$HAVE_HOTKEYS" = xyes; then
		notification_features="$notification_features hotkeys"
	else
		notification_missing_dependencies="$notification_missing_dependencies hotkeys"
	fi
	notification_features="$notification_features lcdproc"
	if test x"$HAVE_LIBINDICATE" = xyes; then
		notification_features="$notification_features libindicate"
	else
		notification_missing_dependencies="$notification_missing_dependencies libindicate"
	fi
	if test x"$HAVE_LIBNOTIFY" = xyes; then
		notification_features="$notification_features libnotify"
	else
		notification_missing_dependencies="$notification_missing_dependencies libnotify"
	fi
	if test x"$HAVE_LIBCANBERRA_GTK" = xyes; then
		notification_features="$notification_features libcanberra-gtk"
	else
		notification_missing_dependencies="$notification_missing_dependencies libcanberra-gtk"
	fi
	notification_features="$notification_features popup trayicon"
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS notification"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build pdf_viewer plugin])
if test x"$enable_pdf_viewer_plugin" != xno; then
	dependencies_missing=""

	if test x"$HAVE_POPPLER" = xno; then
		dependencies_missing="libpoppler-glib $dependencies_missing"
	fi

	if test x"$dependencies_missing" = x; then
		PLUGINS="$PLUGINS pdf_viewer"
		AC_MSG_RESULT(yes)
	elif test x"$enable_pdf_viewer_plugin" = xauto; then
		AC_MSG_RESULT(no)
		AC_MSG_WARN("Plugin pdf_viewer will not be built; missing $dependencies_missing")
		enable_pdf_viewer_plugin=no
		MISSING_DEPS_PLUGINS="$MISSING_DEPS_PLUGINS pdf_viewer"
	else
		AC_MSG_RESULT(no)
		AC_MSG_ERROR("Plugin pdf_viewer cannot be built; missing $dependencies_missing")
	fi
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS pdf_viewer"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build perl plugin])
if test x"$enable_perl_plugin" != xno; then
	dependencies_missing=""

	if test x"$HAVE_LIBPERL" = xno; then
		dependencies_missing="libperl $dependencies_missing"
	fi

	if test x"$dependencies_missing" = x; then
		PLUGINS="$PLUGINS perl"
		AC_MSG_RESULT(yes)
	elif test x"$enable_perl_plugin" = xauto; then
		AC_MSG_RESULT(no)
		AC_MSG_WARN("Plugin perl will not be built; missing $dependencies_missing")
		enable_perl_plugin=no
		MISSING_DEPS_PLUGINS="$MISSING_DEPS_PLUGINS perl"
	else
		AC_MSG_RESULT(no)
		AC_MSG_ERROR("Plugin perl cannot be built; missing $dependencies_missing")
	fi
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS perl"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build python plugin])
if test x"$enable_python_plugin" != xno; then
	dependencies_missing=""

	if test x"$HAVE_PYTHON" = xno; then
		dependencies_missing="python $dependencies_missing"
	fi

	if test x"$dependencies_missing" = x; then
		PLUGINS="$PLUGINS python"
		AC_MSG_RESULT(yes)
	elif test x"$enable_python_plugin" = xauto; then
		AC_MSG_RESULT(no)
		AC_MSG_WARN("Plugin python will not be built; missing $dependencies_missing")
		enable_python_plugin=no
		MISSING_DEPS_PLUGINS="$MISSING_DEPS_PLUGINS python"
	else
		AC_MSG_RESULT(no)
		AC_MSG_ERROR("Plugin python cannot be built; missing $dependencies_missing")
	fi
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS python"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build pgpcore plugin])
if test x"$enable_pgpcore_plugin" != xno; then
	dependencies_missing=""

	if test x"$HAVE_GPGME" = xno; then
		dependencies_missing="libgpgme $dependencies_missing"
	fi

	if test x"$dependencies_missing" = x; then
		PLUGINS="$PLUGINS pgpcore"
		AC_MSG_RESULT(yes)
	elif test x"$enable_pgpcore_plugin" = xauto; then
		AC_MSG_RESULT(no)
		AC_MSG_WARN("Plugin pgpcore will not be built; missing $dependencies_missing")
		enable_pgpcore_plugin=no
		MISSING_DEPS_PLUGINS="$MISSING_DEPS_PLUGINS pgpcore"
	else
		AC_MSG_RESULT(no)
		AC_MSG_ERROR("Plugin pgpcore cannot be built; missing $dependencies_missing")
	fi
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS pgpcore"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build pgpmime plugin])
if test x"$enable_pgpmime_plugin" != xno; then
	dependencies_missing=""

	if test x"$HAVE_GPGME" = xno; then
		dependencies_missing="libgpgme $dependencies_missing"
	fi
	if test x"$enable_pgpcore_plugin" = xno; then
		dependencies_missing="pgpcore plugin $dependencies_missing"
	fi

	if test x"$dependencies_missing" = x; then
		PLUGINS="$PLUGINS pgpmime"
		AC_MSG_RESULT(yes)
	elif test x"$enable_pgpmime_plugin" = xauto; then
		AC_MSG_RESULT(no)
		AC_MSG_WARN("Plugin pgpmime will not be built; missing $dependencies_missing")
		enable_pgpmime_plugin=no
		MISSING_DEPS_PLUGINS="$MISSING_DEPS_PLUGINS pgpmime"
	else
		AC_MSG_RESULT(no)
		AC_MSG_ERROR("Plugin pgpmime cannot be built; missing $dependencies_missing")
	fi
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS pgpmime"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build pgpinline plugin])
if test x"$enable_pgpinline_plugin" != xno; then
	dependencies_missing=""

	if test x"$HAVE_GPGME" = xno; then
		dependencies_missing="libgpgme $dependencies_missing"
	fi
	if test x"$enable_pgpcore_plugin" = xno; then
		dependencies_missing="pgpcore plugin $dependencies_missing"
	fi

	if test x"$dependencies_missing" = x; then
		PLUGINS="$PLUGINS pgpinline"
		AC_MSG_RESULT(yes)
	elif test x"$enable_pgpinline_plugin" = xauto; then
		AC_MSG_RESULT(no)
		AC_MSG_WARN("Plugin pgpinline will not be built; missing $dependencies_missing")
		enable_pgpinline_plugin=no
		MISSING_DEPS_PLUGINS="$MISSING_DEPS_PLUGINS pgpinline"
	else
		AC_MSG_RESULT(no)
		AC_MSG_ERROR("Plugin pgpinline cannot be built; missing $dependencies_missing")
	fi
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS pgpinline"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build qr-avatar plugin])
if test x"$enable_qr_avatar_plugin" != xno; then
       PLUGINS="$PLUGINS qr-avatar"
       AC_MSG_RESULT(yes)
else
       DISABLED_PLUGINS="$DISABLED_PLUGINS qr-avatar"
       AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build rssyl plugin])
if test x"$enable_rssyl_plugin" != xno; then
	dependencies_missing=""

	if test x"$HAVE_EXPAT" = xno; then
		dependencies_missing="expat $dependencies_missing"
	fi
	if test x"$HAVE_CURL" = xno; then
		dependencies_missing="libcurl $dependencies_missing"
	fi

	if test x"$dependencies_missing" = x; then
		PLUGINS="$PLUGINS rssyl"
		AC_MSG_RESULT(yes)
	elif test x"$enable_rssyl_plugin" = xauto; then
		AC_MSG_RESULT(no)
		AC_MSG_WARN("Plugin rssyl will not be built; missing $dependencies_missing")
		enable_rssyl_plugin=no
		MISSING_DEPS_PLUGINS="$MISSING_DEPS_PLUGINS rssyl"
	else
		AC_MSG_RESULT(no)
		AC_MSG_ERROR("Plugin rssyl cannot be built; missing $dependencies_missing")
	fi
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS rssyl"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build spamassassin plugin])
if test x"$enable_spamassassin_plugin" != xno; then
	PLUGINS="$PLUGINS spamassassin"
	AC_MSG_RESULT(yes)
	AC_SPAMASSASSIN
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS spamassassin"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build smime plugin])
if test x"$enable_smime_plugin" != xno; then
	dependencies_missing=""

	if test x"$HAVE_GPGME" = xno; then
		dependencies_missing="libgpgme $dependencies_missing"
	fi
	if test x"$enable_pgpcore_plugin" = xno; then
		dependencies_missing="pgpcore plugin $dependencies_missing"
	fi

	if test x"$dependencies_missing" = x; then
		PLUGINS="$PLUGINS smime"
		AC_MSG_RESULT(yes)
	elif test x"$enable_smime_plugin" = xauto; then
		AC_MSG_RESULT(no)
		AC_MSG_WARN("Plugin smime will not be built; missing $dependencies_missing")
		enable_smime_plugin=no
		MISSING_DEPS_PLUGINS="$MISSING_DEPS_PLUGINS smime"
	else
		AC_MSG_RESULT(no)
		AC_MSG_ERROR("Plugin smime cannot be built; missing $dependencies_missing")
	fi
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS smime"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build spam_report plugin])
if test x"$enable_spam_report_plugin" != xno; then
	dependencies_missing=""

	if test x"$HAVE_CURL" = xno; then
		dependencies_missing="libcurl $dependencies_missing"
	fi

	if test x"$dependencies_missing" = x; then
		PLUGINS="$PLUGINS spam_report"
		AC_MSG_RESULT(yes)
	elif test x"$enable_spam_report_plugin" = xauto; then
		AC_MSG_RESULT(no)
		AC_MSG_WARN("Plugin spam_report will not be built; missing $dependencies_missing")
		enable_spam_report_plugin=no
		MISSING_DEPS_PLUGINS="$MISSING_DEPS_PLUGINS spam_report"
	else
		AC_MSG_RESULT(no)
		AC_MSG_ERROR("Plugin spam_report cannot be built; missing $dependencies_missing")
	fi
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS spam_report"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build tnef_parse plugin])
if test x"$enable_tnef_parse_plugin" != xno; then
	PLUGINS="$PLUGINS tnef_parse"
	AC_MSG_RESULT(yes)
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS tnef_parse"
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to build vcalendar plugin])
if test x"$enable_vcalendar_plugin" != xno; then
	dependencies_missing=""

	if test x"$HAVE_CURL" = xno; then
		dependencies_missing="libcurl $dependencies_missing"
	fi

	if test x"$HAVE_PERL" = xno; then
		dependencies_missing="perl $dependencies_missing"
	fi

	if test x"$dependencies_missing" = x; then
		PLUGINS="$PLUGINS vcalendar"
		AC_MSG_RESULT(yes)
	elif test x"$enable_vcalendar_plugin" = xauto; then
		AC_MSG_RESULT(no)
		AC_MSG_WARN("Plugin vcalendar will not be built; missing $dependencies_missing")
		enable_vcalendar_plugin=no
		MISSING_DEPS_PLUGINS="$MISSING_DEPS_PLUGINS vcalendar"
	else
		AC_MSG_RESULT(no)
		AC_MSG_ERROR("Plugin vcalendar cannot be built; missing $dependencies_missing")
	fi
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS vcalendar"
	AC_MSG_RESULT(no)
fi

dnl And finally the automake conditionals.

AM_CONDITIONAL(BUILD_ACPI_NOTIFIER_PLUGIN,	test x"$enable_acpi_notifier_plugin" != xno)
AM_CONDITIONAL(BUILD_ADDRESS_KEEPER_PLUGIN,	test x"$enable_address_keeper_plugin" != xno)
AM_CONDITIONAL(BUILD_ARCHIVE_PLUGIN,		test x"$enable_archive_plugin" != xno)
AM_CONDITIONAL(BUILD_ATT_REMOVER_PLUGIN,	test x"$enable_att_remover_plugin" != xno)
AM_CONDITIONAL(BUILD_ATTACHWARNER_PLUGIN,	test x"$enable_attachwarner_plugin" != xno)
AM_CONDITIONAL(BUILD_BOGOFILTER_PLUGIN,		test x"$enable_bogofilter_plugin" != xno)
AM_CONDITIONAL(BUILD_BSFILTER_PLUGIN,		test x"$enable_bsfilter_plugin" != xno)
AM_CONDITIONAL(BUILD_CLAMD_PLUGIN,		test x"$enable_clamd_plugin" != xno)
AM_CONDITIONAL(BUILD_DEMO_PLUGIN,		test x"$enable_demo_plugin" != xno)
AM_CONDITIONAL(BUILD_FANCY_PLUGIN,		test x"$enable_fancy_plugin" != xno)
AM_CONDITIONAL(BUILD_FETCHINFO_PLUGIN,		test x"$enable_fetchinfo_plugin" != xno)
AM_CONDITIONAL(BUILD_GDATA_PLUGIN,		test x"$enable_gdata_plugin" != xno)
AM_CONDITIONAL(BUILD_GEOLOCATION_PLUGIN,	test x"$enable_geolocation_plugin" != xno)
AM_CONDITIONAL(BUILD_LIBRAVATAR_PLUGIN,		test x"$enable_libravatar_plugin" != xno)
AM_CONDITIONAL(BUILD_MAILMBOX_PLUGIN,		test x"$enable_mailmbox_plugin" != xno)
AM_CONDITIONAL(BUILD_MANAGESIEVE_PLUGIN,		test x"$enable_managesieve_plugin" != xno)
AM_CONDITIONAL(BUILD_NEWMAIL_PLUGIN,		test x"$enable_newmail_plugin" != xno)
AM_CONDITIONAL(BUILD_NOTIFICATION_PLUGIN,	test x"$enable_notification_plugin" != xno)
AM_CONDITIONAL(BUILD_HOTKEYS,			test x"$enable_notification_plugin" != xno -a x"$HAVE_HOTKEYS" = xyes)
AM_CONDITIONAL(BUILD_PDF_VIEWER_PLUGIN,		test x"$enable_pdf_viewer_plugin" != xno)
AM_CONDITIONAL(BUILD_PERL_PLUGIN,		test x"$enable_perl_plugin" != xno)
AM_CONDITIONAL(BUILD_PYTHON_PLUGIN,		test x"$enable_python_plugin" != xno)
AM_CONDITIONAL(BUILD_PGPCORE_PLUGIN,		test x"$enable_pgpcore_plugin" != xno)
AM_CONDITIONAL(BUILD_PGPMIME_PLUGIN,		test x"$enable_pgpmime_plugin" != xno)
AM_CONDITIONAL(BUILD_PGPINLINE_PLUGIN,		test x"$enable_pgpinline_plugin" != xno)
AM_CONDITIONAL(BUILD_QR_AVATAR_PLUGIN,		test x"$enable_qr_avatar_plugin" != xno)
AM_CONDITIONAL(BUILD_RSSYL_PLUGIN,		test x"$enable_rssyl_plugin" != xno)
AM_CONDITIONAL(BUILD_SMIME_PLUGIN,		test x"$enable_smime_plugin" != xno)
AM_CONDITIONAL(BUILD_SPAMASSASSIN_PLUGIN,	test x"$enable_spamassassin_plugin" != xno)
AM_CONDITIONAL(BUILD_SPAM_REPORT_PLUGIN,	test x"$enable_spam_report_plugin" != xno)
AM_CONDITIONAL(BUILD_TNEF_PARSE_PLUGIN,		test x"$enable_tnef_parse_plugin" != xno)
AM_CONDITIONAL(BUILD_VCALENDAR_PLUGIN,		test x"$enable_vcalendar_plugin" != xno)


dnl ****************************
dnl ** Final configure output **
dnl ****************************

AC_OUTPUT([
Makefile
m4/Makefile
po/Makefile.in
src/common/version.h
src/Makefile
src/common/Makefile
src/common/passcrypt.h
src/gtk/Makefile
src/etpan/Makefile
src/plugins/Makefile
src/plugins/acpi_notifier/Makefile
src/plugins/address_keeper/Makefile
src/plugins/archive/Makefile
src/plugins/att_remover/Makefile
src/plugins/attachwarner/Makefile
src/plugins/bogofilter/Makefile
src/plugins/bsfilter/Makefile
src/plugins/clamd/Makefile
src/plugins/clamd/libclamd/Makefile
src/plugins/demo/Makefile
src/plugins/fancy/Makefile
src/plugins/fetchinfo/Makefile
src/plugins/gdata/Makefile
src/plugins/geolocation/Makefile
src/plugins/libravatar/Makefile
src/plugins/mailmbox/Makefile
src/plugins/managesieve/Makefile
src/plugins/newmail/Makefile
src/plugins/notification/Makefile
src/plugins/notification/gtkhotkey/Makefile
src/plugins/pdf_viewer/Makefile
src/plugins/perl/Makefile
src/plugins/perl/tools/Makefile
src/plugins/python/Makefile
src/plugins/python/examples/Makefile
src/plugins/pgpcore/Makefile
src/plugins/pgpmime/Makefile
src/plugins/pgpinline/Makefile
src/plugins/qr_avatar/Makefile
src/plugins/rssyl/Makefile
src/plugins/rssyl/libfeed/Makefile
src/plugins/smime/Makefile
src/plugins/spamassassin/Makefile
src/plugins/spam_report/Makefile
src/plugins/tnef_parse/Makefile
src/plugins/vcalendar/Makefile
src/plugins/vcalendar/libical/Makefile
src/plugins/vcalendar/libical/libical/icalversion.h
src/plugins/vcalendar/libical/libical/Makefile
src/plugins/vcalendar/libical/design-data/Makefile
src/plugins/vcalendar/libical/scripts/Makefile
doc/Makefile
doc/man/Makefile
tools/Makefile
config/Makefile
manual/Makefile
manual/dtd/Makefile
manual/dist/Makefile
manual/dist/pdf/Makefile
manual/dist/ps/Makefile
manual/dist/html/Makefile
manual/dist/txt/Makefile
manual/fr/Makefile
manual/fr/dist/Makefile
manual/fr/dist/pdf/Makefile
manual/fr/dist/ps/Makefile
manual/fr/dist/html/Makefile
manual/fr/dist/txt/Makefile
manual/pl/Makefile
manual/pl/dist/Makefile
manual/pl/dist/pdf/Makefile
manual/pl/dist/ps/Makefile
manual/pl/dist/html/Makefile
manual/pl/dist/txt/Makefile
manual/es/Makefile
manual/es/dist/Makefile
manual/es/dist/pdf/Makefile
manual/es/dist/ps/Makefile
manual/es/dist/html/Makefile
manual/es/dist/txt/Makefile
manual/de/Makefile
manual/de/dist/Makefile
manual/de/dist/pdf/Makefile
manual/de/dist/ps/Makefile
manual/de/dist/html/Makefile
manual/de/dist/txt/Makefile
claws-mail.pc
])

dnl Output the configuration summary
echo ""
echo "$PACKAGE $VERSION"
echo ""
if test x"$enable_new_addrbook" = xyes; then
	echo "Using Address Book : New experimental interface"
else
	echo "Using Address Book : Old stable interface"
	echo "JPilot             : $enable_jpilot"
	echo "LDAP               : $enable_ldap"
fi
echo "gnuTLS             : $enable_gnutls"
echo "iconv              : $am_cv_func_iconv"
echo "compface           : $enable_compface"
echo "IPv6               : $enable_ipv6"
echo "enchant            : $enable_enchant"
echo "IMAP4              : $enable_libetpan"
echo "NNTP               : $enable_libetpan"
echo "Crash dialog       : $enable_crash_dialog"
echo "LibSM              : $enable_libsm"
echo "DBUS               : $enable_dbus"
echo "NetworkManager     : $enable_networkmanager"
echo "Manual             : $enable_manual"
echo "Generic UMPC code  : $enable_generic_umpc"
echo "Config dir         : $ac_cv_with_config_dir"

echo "Plugins"
echo "   Built:"
for plugin in $PLUGINS; do
echo "            - $plugin"
if test x"$plugin" = xnotification; then
	echo "                Features:"
	for notif_feature in $notification_features; do
		echo "                    $notif_feature"
	done;
	if test "x$notification_missing_dependencies" != x; then
		echo "                Disabled due to missing dependencies:"
		for notif_miss_dep in $notification_missing_dependencies; do
			echo "                    $notif_miss_dep"
		done;
	fi
fi
done;
if test "x$DISABLED_PLUGINS" != x; then
echo "   Disabled:"
for plugin in $DISABLED_PLUGINS; do
echo "            - $plugin"
done;
fi

if test "x$MISSING_DEPS_PLUGINS" != x; then
echo "   Disabled due to missing dependencies:"
for plugin in $MISSING_DEPS_PLUGINS; do
echo "            - $plugin"
done;
fi
echo ""
echo "The binary will be installed in $prefix/bin"
echo ""
echo "Configure finished, type 'make' to build."
